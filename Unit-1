Rust Programming


1 Display output using print!

fn main() {
    print!("Hello, Rust!");
}

Output:
Hello, Rust!



2. Print pattern using placeholders

fn main() {
    println!("1");
    println!("22");
    println!("333");
    println!("4444");
    println!("55555");
}

Output:
1
22
333
4444
55555

3. Declare variables and print values


fn main() {
    let x = 1000;
    let y = "Programming";
    
    println!("x = {}, y = {}", x, y);

    let x = 1100;
    println!("x = {}, y = {}", x, y);
}


Output:
x = 1000, y = Programming
x = 1100, y = Programming

4. Scope and Shadowing example**

fn main() {
    let a = 10;
    {
        let a = "shadowed";
        println!("Inside: {}", a);
    }
    println!("Outside: {}", a);
}


Output:

Inside: shadowed
Outside: 10

5. Implicit vs Explicit type declaration
fn main() {
    // Implicit
    let x = 25;
    let y = 3.14;

    // Explicit
    let z: u32 = 100;
    let w: &str = "Rust";

    println!("x = {}, y = {}, z = {}, w = {}", x, y, z, w);
}


Output:
x = 25, y = 3.14, z = 100, w = Rust

6. Array with numbers divisible by 2 from 0 to 10

fn main() {
    let arr = [0, 2, 4, 6, 8, 10];
    println!("arr = {:?}", arr);
}

Output:
arr = [0, 2, 4, 6, 8, 10]

7. Create and access a tuple

fn main() {
    let person = ("Alice", 25, "Student");

    println!("Name: {}", person.0);
    println!("Age: {}", person.1);
    println!("Occupation: {}", person.2);
}

Output:
Name: Alice
Age: 25
Occupation: Student

8. Array slicing examples

fn main() {
    let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

    let slice1 = &arr[1..3];  // 2nd and 3rd element
    let slice2 = &arr[..3];   // Omit start index
    let slice3 = &arr[5..];   // Omit end index
    let slice4 = &arr[..];    // Full array

    println!("Slice 1: {:?}", slice1);
    println!("Slice 2: {:?}", slice2);
    println!("Slice 3: {:?}", slice3);
    println!("Slice 4: {:?}", slice4);
}

Output:
Slice 1: [1, 2]
Slice 2: [0, 1, 2]
Slice 3: [5, 6, 7, 8, 9]
Slice 4: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


9. Constants of different types
const PI: f64 = 3.14159;
const MAX_USERS: u32 = 1000;
const APP_NAME: &str = "MyApp";
const IS_ACTIVE: bool = true;

fn main() {
    println!("PI = {}", PI);
    println!("MAX_USERS = {}", MAX_USERS);
    println!("APP_NAME = {}", APP_NAME);
    println!("IS_ACTIVE = {}", IS_ACTIVE);
}
Output:
PI = 3.14159
MAX_USERS = 1000
APP_NAME = MyApp
IS_ACTIVE = true
```
